def getHost() {
  def remote = [:]
  remote.name = 'server-dev'
  remote.host = "${env.REMOTE_HOST}"
  remote.user = "${env.CREDS_DEV_SERVER_USR}"
  remote.password = "${env.CREDS_DEV_SERVER_PSW}"
  remote.port = 22
  remote.allowAnyHosts = true
  return remote
}

pipeline {
    agent {
        label 'vm-slave' 
    }

    environment {
      REMOTE_HOST = '52.237.75.205'
      LOCAL_HOST = '52.163.121.34'
      DOCKER_REPO_URL = 'docker.pkg.github.com/boat-house-group4/boat-house'
      CREDS_GITHUB_REGISTRY = credentials('creds-github-registry')
      CREDS_DEV_SERVER = credentials('creds-dev-server')
      def server=''
    }
    stages {
        stage('before-build'){
            steps {
                sh "printenv"
            }
        }

        stage('build test image'){
            steps {
                sh "docker build -f Dockerfile -t ${DOCKER_REPO_URL}/uitest:${env.BRANCH_NAME}-${env.BUILD_ID} -t ${DOCKER_REPO_URL}/uitest:latest ."
                sh "docker login docker.pkg.github.com -u ${CREDS_GITHUB_REGISTRY_USR} -p ${CREDS_GITHUB_REGISTRY_PSW}"
                sh "docker push ${DOCKER_REPO_URL}/uitest:latest"
            }
        }

        stage('run ui test in container'){
            steps {
                script {
                    // 本地执行测试
                    sh "mkdir -p uitest/report"
                    sh "docker-compose -f docker-compose-hub.yml -p uitest-hub down"
                    sh "docker-compose -f docker-compose-hub.yml -p uitest-hub pull"
                    sh "docker-compose -f docker-compose-hub.yml -p uitest-hub up -d"
                    sh "docker run -v \$(pwd)/uitest/report:/app/TestResults ${DOCKER_REPO_URL}/uitest:latest"
                    mstest testResultsFile:"**/*.trx", keepLongStdio: true
                    }
            }
        }
    }
 }